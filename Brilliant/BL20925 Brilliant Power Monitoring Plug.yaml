# Check or edit all secrets to match yours.
# Power metering isn't calibrated.
# Based on Tasmota Descrption: https://templates.blakadder.com/brilliant_BL20925.html

#GPIO   Component
#GPIO00	None
#GPIO01	None
#GPIO02	None
#GPIO03	Button1
#GPIO04	HLW8012 CF
#GPIO05	HLWBL CF1
#GPIO09	None
#GPIO10	None
#GPIO12	HLWBL SELi
#GPIO13	LedLinki
#GPIO14	Relay1
#GPIO15	None
#GPIO16	None

substitutions:
    devicename: brilliant_smartplug_1
    friendly_name: Brilliant Smartplug 1 
    device_description: Brilliant Lighting BL20925 Power Monitoring Plug with button and Blue led.

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP8266
  
wifi:
  ssid: !secret Wifi_SSID
  password: !secret WiFi_Password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Brilliant Smartplug 1"
    password: !secret AP_Password
      
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.2.1
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0
  
captive_portal:
  
  # Enable logging
logger:
#    baud_rate: 0 #disable UART logging since we aren't connected to GPIO1 TX
  

# Web server can be removed after enabling HA API
#web_server: 
#  port: 80

# Enable Home Assistant API
api:
  password: !secret OTA_Password

ota:
  password: !secret OTA_Password

# Enable time component for use by daily power sensor
time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
# Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes

# Reports the WiFi signal strength
  - platform: wifi_signal
    name: ${friendly_name} Wifi Signal
    update_interval: 60s

# Reports the Current, Voltage, and Power used by the plugged-in device (not counting this plug's own usage of about 0.8W/0.019A, so subtract those when calibrating with this plugged into a Kill-A-Watt type meter)
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO04
    cf1_pin: GPIO05
    current_resistor: 0.001 #The value of the shunt resistor for current measurement. Defaults to the Sonoff POWâ€™s value 0.001 ohm. 
    # voltage_divider: 2401 # Commented out, using default
    power:
      name: ${friendly_name} Power
      unit_of_measurement: W
      id: wattage
      filters:
        # - delta: 10 # Don't report if change is less than 10W from previous reported, make it smaller if you got smaller load
        - calibrate_linear:
            # Map 0.0 (from sensor) to 0.0 (true value)
            - 0.0 -> 0.0 #Need to keep 0 mapped to 0 for when connected device is not drawing any power
            - 16.9 -> 5.7 # -0.8W from just this plug 
    current:
      name: ${friendly_name} Current
      unit_of_measurement: A
      filters:
        # - delta: 1
        - calibrate_linear:
            # Map 0.0 (from sensor) to 0.0 (true value)
            - 0.0 -> 0.0 #Need to keep 0 mapped to 0 for when connected device is not drawing any power
            - 0.0376 -> 0.025 # -0.019A from just this plug, very raw calibration
    voltage:
      name: ${friendly_name} Voltage
      unit_of_measurement: V
      filters:
        - delta: 2
        - calibrate_linear:
            # Map 0.0 (from sensor) to 0.0 (true value)
            - 0.0 -> 0.0 #Don't care if 0 reading aligns with 0 real Volts since we won't ever measure that
            - 574.78 -> 228.0 #load was on
    change_mode_every: 1 #Skips first reading after each change, so this will double the update interval. Default 8
    update_interval: 10s #10s setting => 20 second effective update rate for Power, 40 second for Current and Voltage. Default 60s

# Reports the total Power so-far each day, resets at midnight, see https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: ${friendly_name} Total Daily Energy
    power_id: wattage
    filters:
        - multiply: 0.001  ## convert Wh to kWh
    unit_of_measurement: kWh

binary_sensor:
# Reports if this device is Connected or not
  # - platform: status
  #   name: ${friendly_name} Status

# Button on the side is pressed and then toggle relay
  - platform: gpio
    device_class: power
    pin:
      number: GPIO03
      inverted: True
    name: ${friendly_name} Button # Name to make button visible in HA
    on_press:
      - switch.toggle: relay

text_sensor:
# Reports the ESPHome Version with compile date
  - platform: version
    name: ${friendly_name} ESPHome Version

# Reports detailed wifi info, can be commented out
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address
    # ssid: # Some additional wifi info that is not normally needed
    #   name: ${friendly_name} Connected SSID
    # bssid:
    #   name: ${friendly_name} Connected BSSID

switch:
# Relay itself
  - platform: gpio
    name: ${friendly_name}
    pin: GPIO14
    id: relay
    restore_mode: RESTORE_DEFAULT_OFF #Try to restore relay state after reboot/power-loss event.
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    on_turn_on: # Action when relay is turned on
      - script.execute: led_power_on
    on_turn_off: # Action when relay is turned off
      - script.execute: led_relay_off

output:
# Output GPIOs for blue led
- platform: esp8266_pwm # Blue
  id: brilliant_smartplug_1_blue_output
  pin: 
    number: GPIO013
    inverted: True

light:
# RGB light
- platform: monochromatic
  name: ${friendly_name} Light
  output: brilliant_smartplug_1_blue_output
  id: brilliant_smartplug_1_blue_led

# Blink the blue light if we aren't connected to WiFi. Could use https://esphome.io/components/status_led.html instead but then we couldn't use the blue light for other things as well.
# Only if not connected after 30s
interval:
  - interval: 2000ms
    then:
      - if:
          condition:
            for:
              time: 30s
              condition:
                not:
                  wifi.connected:
          then:
            - light.turn_on:
                id: brilliant_smartplug_1_blue_led
                brightness: 100%

script:
  - id: led_relay_off # Normal operation when relay is off
    then:
      - light.turn_off:
          id: brilliant_smartplug_1_blue_led
  - id: led_power_on # Normal operation when relay is on
    then:
      - light.turn_on:
          id: brilliant_smartplug_1_blue_led
          brightness: 80%